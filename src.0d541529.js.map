{"version":3,"sources":["js/screen.js","js/color.js","js/timer.js","js/prom1.js","js/prom2.js","js/prom3.js","index.js"],"names":["refs","btnStart","document","querySelector","btnStop","body","colors","intervalId","randomIntegerFromInterval","min","max","Math","floor","random","setBodyColor","idx","style","backgroundColor","onBtnClick","evt","target","disabled","setInterval","clearInterval","addEventListener","onClick","start","stop","dataset","action","CountdownTimer","constructor","selector","targetDate","init","prevTime","getTimeComponents","Date","creatEl","currentTime","deltaTime","time","key","valueNewEl","valueOldEl","newValue","currentValue","parent","parentNode","classList","remove","textContent","offsetWidth","add","days","pad","hours","mins","secs","value","String","padStart","timer1El","innerHTML","timer","delay","ms","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","makeTransaction","transaction","id","reject","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.0d541529.js","sourceRoot":"../src","sourcesContent":["const refs = {\r\n  btnStart: document.querySelector('button[data-action=\"start\"]'),\r\n  btnStop: document.querySelector('button[data-action=\"stop\"]'),\r\n  body: document.querySelector('body'),\r\n};\r\nconst colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\nlet intervalId = null;\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst setBodyColor = () => {\r\n  const idx = randomIntegerFromInterval(0, 5);\r\n  refs.body.style.backgroundColor = `${colors[idx]}`;\r\n};\r\n\r\nconst onBtnClick = evt => {\r\n  if (evt.target === refs.btnStart) {\r\n    refs.btnStart.disabled = true;\r\n    intervalId = setInterval(setBodyColor, 1000);\r\n  }\r\n  if (evt.target === refs.btnStop) {\r\n    clearInterval(intervalId);\r\n    refs.btnStart.disabled = false;\r\n  }\r\n};\r\n\r\ndocument.addEventListener('click', onBtnClick);","const refs = {\r\n  btnStart: document.querySelector('button[data-action=\"start\"]'),\r\n  btnStop: document.querySelector('button[data-action=\"stop\"]'),\r\n  body: document.querySelector('body'),\r\n};\r\nconst colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nlet intervalId = null;\r\nrefs.body.addEventListener('click', onClick);\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst setBodyColor = () => {\r\n  const idx = randomIntegerFromInterval(0, 5);\r\n  refs.body.style.backgroundColor = `${colors[idx]}`;\r\n};\r\n\r\nfunction start() {\r\n  refs.btnStart.disabled = true;\r\n  intervalId = setInterval(setBodyColor, 1000);\r\n}\r\n\r\nfunction stop() {\r\n  clearInterval(intervalId);\r\n  refs.btnStart.disabled = false;\r\n}\r\n\r\nfunction onClick(evt) {\r\n  let action = evt.target.dataset.action;\r\n  if (action === 'start') {\r\n    start();\r\n    return;\r\n  }\r\n  stop();\r\n}","class CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.intervalId = null;\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    let prevTime = this.getTimeComponents(this.targetDate - new Date());\r\n    this.creatEl(prevTime);\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = new Date();\r\n      const deltaTime = this.targetDate - currentTime;\r\n      const time = this.getTimeComponents(deltaTime);\r\n      for (const key in time) {\r\n        const valueNewEl = document.querySelector(`[data-value=\"${key}New\"]`);\r\n        const valueOldEl = document.querySelector(`[data-value=\"${key}Old\"]`);\r\n        const newValue = time[key];\r\n        const currentValue = prevTime[key];\r\n        const parent = valueNewEl.parentNode;\r\n        if (newValue !== currentValue) {\r\n          parent.classList.remove('anim');\r\n          valueNewEl.textContent = newValue;\r\n          valueOldEl.textContent = currentValue;\r\n          const reflow = parent.offsetWidth;\r\n          parent.classList.add('anim');\r\n        }\r\n      }\r\n      prevTime = { ...time };\r\n\r\n      if (deltaTime < 1000) {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n  creatEl(time = {}) {\r\n    const timer1El = document.querySelector(this.selector);\r\n    for (const key in time) {\r\n      const valueEl = timer1El.querySelector(`[data-value=\"${key}\"]`);\r\n      valueEl.innerHTML = `<span class=\"valueNew\" data-value=\"${key}New\">${time[key]}</span>\r\n          <span class=\"valueOld\" data-value=\"${key}Old\">${time[key]}</span>`;\r\n    }\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 28, 2021'),\r\n});","const delay = (ms) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve) => {\r\n    const updatedUsers = allUsers.map((user) =>\r\n      user.name === userName ? { ...user, active: !user.active } : user\r\n    );\r\n\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger2 = (updatedUsers) => console.table(updatedUsers);\r\n\r\n// Currently the function works like this\r\ntoggleUserState(users, 'Mango', console.table);\r\ntoggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\ntoggleUserState(users, 'Mango').then(console.table);\r\ntoggleUserState(users, 'Ajax').then(console.table);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  const id = transaction.id;\r\n  return new Promise(function (resolve, reject) {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, delay: time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 70 }).then(logSuccess).catch(logError);\r\n","import \"./js/screen\";\r\nimport \"./js/color\";\r\nimport \"./js/timer\";\r\nimport \"./js/prom1\";\r\nimport \"./js/prom2\";\r\nimport \"./js/prom3\"\r\n"]}